#include <ggo_nonreg.h>
#include <ggo_morphology.h>
#include <ggo_buffer.h>

/////////////////////////////////////////////////////////////////////
GGO_TEST(morphology, dilatation_rectangle)
{
  const ggo::buffer8u input{
    0xff, 0x00, 0x00, 0x00, 0x00 ,0x00,
    0x00, 0x00, 0x00, 0x00, 0x00 ,0x00,
    0x00, 0x00, 0x00, 0x00, 0x00 ,0x00,
    0x00, 0x00, 0x00, 0x00, 0xff ,0x00,
    0x00, 0x00, 0x00, 0x00, 0x00 ,0x00
  };
  ggo::buffer8u output(input.size());

  ggo::dilatation_rectangle(input.data(), output.data(), 6, 5, 6, 1, 1);

  const ggo::buffer8u expected{
    0xff, 0xff, 0x00, 0x00, 0x00 ,0x00,
    0xff, 0xff, 0x00, 0x00, 0x00 ,0x00,
    0x00, 0x00, 0x00, 0xff, 0xff ,0xff,
    0x00, 0x00, 0x00, 0xff, 0xff ,0xff,
    0x00, 0x00, 0x00, 0xff, 0xff ,0xff
  };

  GGO_CHECK(std::equal(output.begin(), output.end(), expected.begin()));
}

/////////////////////////////////////////////////////////////////////
GGO_TEST(morphology, dilatation_disc)
{
  const ggo::buffer8u input{
    0x00, 0x00, 0x00, 0x00, 0x00 ,0x00,
    0x00, 0x00, 0x00, 0x00, 0x00 ,0x00,
    0x00, 0xff, 0x00, 0x00, 0x00 ,0x00,
    0x00, 0x00, 0x00, 0x00, 0x00 ,0x00,
    0x00, 0x00, 0x00, 0x00, 0x00 ,0x00
  };
  ggo::buffer8u output(input.size());

  ggo::dilatation_disc(input.data(), output.data(), 6, 5, 6, 2.5f);

  const ggo::buffer8u expected{
    0xff, 0xff, 0xff, 0x00, 0x00 ,0x00,
    0xff, 0xff, 0xff, 0xff, 0x00 ,0x00,
    0xff, 0xff, 0xff, 0xff, 0x00 ,0x00,
    0xff, 0xff, 0xff, 0xff, 0x00 ,0x00,
    0xff, 0xff, 0xff, 0x00, 0x00 ,0x00,
  };

  GGO_CHECK(std::equal(output.begin(), output.end(), expected.begin()));
}

/////////////////////////////////////////////////////////////////////
GGO_TEST(morphology, erosion_rectangle)
{
  const ggo::buffer8u input{
    0xff, 0xff, 0xff, 0xff, 0xff ,0xff,
    0xff, 0xff, 0xff, 0xff, 0xff ,0xff,
    0xff, 0xff, 0xff, 0xff, 0xff ,0xff,
    0xff, 0x00, 0xff, 0xff, 0xff ,0xff,
    0xff, 0xff, 0xff, 0xff, 0xff ,0xff
  };
  ggo::buffer8u output(input.size());

  ggo::erosion_rectangle(input.data(), output.data(), 6, 5, 6, 2, 1);

  const ggo::buffer8u expected{
    0xff, 0xff, 0xff, 0xff, 0xff ,0xff,
    0xff, 0xff, 0xff, 0xff, 0xff ,0xff,
    0x00, 0x00, 0x00, 0x00, 0xff ,0xff,
    0x00, 0x00, 0x00, 0x00, 0xff ,0xff,
    0x00, 0x00, 0x00, 0x00, 0xff ,0xff
  };

  GGO_CHECK(std::equal(output.begin(), output.end(), expected.begin()));
}



