#include <kernel/nonreg/ggo_nonreg.h>
#include <kernel/math/signal_proc/ggo_morphology.h>
#include <kernel/memory/ggo_array.h>

/////////////////////////////////////////////////////////////////////
GGO_TEST(morphology, dilatation_rectangle)
{
  const ggo::array_8u input({
    0xff_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8,
    0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8,
    0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8,
    0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0xff_u8, 0x00_u8,
    0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8});
  ggo::array_8u output(input.size());

  ggo::dilatation_rectangle(input.data(), output.data(), 6, 5, 6, 1, 1);

  const ggo::array_8u expected({
    0xff_u8, 0xff_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8,
    0xff_u8, 0xff_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8,
    0x00_u8, 0x00_u8, 0x00_u8, 0xff_u8, 0xff_u8, 0xff_u8,
    0x00_u8, 0x00_u8, 0x00_u8, 0xff_u8, 0xff_u8, 0xff_u8,
    0x00_u8, 0x00_u8, 0x00_u8, 0xff_u8, 0xff_u8, 0xff_u8});

  GGO_CHECK_EQ(output, expected);
}

/////////////////////////////////////////////////////////////////////
GGO_TEST(morphology, dilatation_disc)
{
  const ggo::array_8u input({
    0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8,
    0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8,
    0x00_u8, 0xff_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8,
    0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8,
    0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8});
  ggo::array_8u output(input.size());

  ggo::dilatation_disc(input.data(), output.data(), 6, 5, 6, 2.5f);

  const ggo::array_8u expected({
    0xff_u8, 0xff_u8, 0xff_u8, 0x00_u8, 0x00_u8, 0x00_u8,
    0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0x00_u8, 0x00_u8,
    0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0x00_u8, 0x00_u8,
    0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0x00_u8, 0x00_u8,
    0xff_u8, 0xff_u8, 0xff_u8, 0x00_u8, 0x00_u8, 0x00_u8,
  });

  GGO_CHECK_EQ(output, expected);
}

/////////////////////////////////////////////////////////////////////
GGO_TEST(morphology, erosion_rectangle)
{
  const ggo::array_8u input({
    0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8,
    0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8,
    0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8,
    0xff_u8, 0x00_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8,
    0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8
  });
  ggo::array_8u output(input.size());

  ggo::erosion_rectangle(input.data(), output.data(), 6, 5, 6, 2, 1);

  const ggo::array_8u expected({
    0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8,
    0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8, 0xff_u8,
    0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0xff_u8, 0xff_u8,
    0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0xff_u8, 0xff_u8,
    0x00_u8, 0x00_u8, 0x00_u8, 0x00_u8, 0xff_u8, 0xff_u8
  });

  GGO_CHECK_EQ(output, expected);
}

